// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwigaCRM.Data;

#nullable disable

namespace TwigaCRM.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221007095206_addingProductDescription1")]
    partial class addingProductDescription1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TwigaCRM.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnswerDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("TwigaCRM.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin Role",
                            Title = "Default Admin",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TwigaCRM.Models.AppRole_Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("AppRole_Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 1,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 2,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 3,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 4,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 5,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 6,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AppRoleId = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 8,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TwigaCRM.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Station")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAppRoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.HasIndex("UserAppRoleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c94a930f-fcfd-41cd-b547-2802e7557504",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@twigacrm.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            IsActivated = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@TWIGACRM.COM",
                            NormalizedUserName = "SUPERADMIN@TWIGACRM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMu5t5cJ3qcBVOYkqtwSCEDFXCMh6GNPanWMY3ZUzbsFt+eZQ7lu+YEZQN/JsSqCrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a52b4342-c977-4514-af20-097274abbab9",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserAppRoleId = 1,
                            UserName = "superadmin@twigacrm.com"
                        });
                });

            modelBuilder.Entity("TwigaCRM.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("TwigaCRM.Models.BusinessLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BusinessLine");
                });

            modelBuilder.Entity("TwigaCRM.Models.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CallTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CallTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ContactCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContectIsCustomer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ForwardedToId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NonCustomerContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NonCustomerTownId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpokenToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NonCustomerTownId");

                    b.HasIndex("SpokenToId");

                    b.ToTable("Call");
                });

            modelBuilder.Entity("TwigaCRM.Models.CallType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CallType");
                });

            modelBuilder.Entity("TwigaCRM.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CampaignBudgetId")
                        .HasColumnType("int");

                    b.Property<string>("CampaignType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FOAstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HRBstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBudgeted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFarmers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPromoters")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignBudgetId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("TwigaCRM.Models.CampaignBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialYearId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfCampaigns")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("TownId");

                    b.ToTable("CampaignBudget");
                });

            modelBuilder.Entity("TwigaCRM.Models.CampaignItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CampaignItem");
                });

            modelBuilder.Entity("TwigaCRM.Models.CompetingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompetingProduct");
                });

            modelBuilder.Entity("TwigaCRM.Models.CropAndAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("CropAndAnimal");
                });

            modelBuilder.Entity("TwigaCRM.Models.CropAndAnimalPestAndDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CropAndAnimalId")
                        .HasColumnType("int");

                    b.Property<int>("PestAndDiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CropAndAnimalId");

                    b.HasIndex("PestAndDiseaseId");

                    b.ToTable("CropAndAnimalPestAndDisease");
                });

            modelBuilder.Entity("TwigaCRM.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TwigaCRM.Models.CustomerBusinessLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusinessLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessLineId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBusinessLine");
                });

            modelBuilder.Entity("TwigaCRM.Models.CustomerSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SectorId");

                    b.ToTable("CustomerSector");
                });

            modelBuilder.Entity("TwigaCRM.Models.DailyMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMovementReportId")
                        .HasColumnType("int");

                    b.Property<int>("MainDistributorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockistOrFarmerId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DailyMovementReportId");

                    b.HasIndex("MainDistributorId");

                    b.HasIndex("ProductId");

                    b.ToTable("DailyMovement");
                });

            modelBuilder.Entity("TwigaCRM.Models.DailyMovementReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FOAstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HRBstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("DailyMovementReport");
                });

            modelBuilder.Entity("TwigaCRM.Models.Demo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemoType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FOAstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<string>("PDstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Demo");
                });

            modelBuilder.Entity("TwigaCRM.Models.DemoDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ApprovedNumberOfDemos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedQuantityOfSample")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedVolumeOfProduct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompetingProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CropAndAnimalId")
                        .HasColumnType("int");

                    b.Property<int?>("CropAndAnimalPestAndDiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("DemoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFOAApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPDApproved")
                        .HasColumnType("bit");

                    b.Property<int>("PestAndDiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequestedNumberOfDemos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequestedQuantityOfSample")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequestedVolumeOfProduct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetingProductId");

                    b.HasIndex("CropAndAnimalId");

                    b.HasIndex("CropAndAnimalPestAndDiseaseId");

                    b.HasIndex("DemoId");

                    b.HasIndex("PestAndDiseaseId");

                    b.HasIndex("ProductId");

                    b.ToTable("DemoDetail");
                });

            modelBuilder.Entity("TwigaCRM.Models.DemoProgressReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoDetailId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinalReport")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DemoDetailId");

                    b.ToTable("DemoProgressReport");
                });

            modelBuilder.Entity("TwigaCRM.Models.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("TwigaCRM.Models.ExpenseReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedExpenseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestedExpenseId");

                    b.ToTable("ExpenseReceipt");
                });

            modelBuilder.Entity("TwigaCRM.Models.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FinancialYear");
                });

            modelBuilder.Entity("TwigaCRM.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "create_roles",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "create_permissions",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "view_roles",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "view_permissions",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "assign_permission",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "disable_permission",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "view_role_details",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default Admin permissions",
                            Name = "import_permissions",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TwigaCRM.Models.PestAndDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PestAndDisease");
                });

            modelBuilder.Entity("TwigaCRM.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FOAstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("TwigaCRM.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusinessLineId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PackagingSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessLineId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("TwigaCRM.Models.ProductCompetingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetingProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetingProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCompetingProduct");
                });

            modelBuilder.Entity("TwigaCRM.Models.ProductCropAndAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CropAndAnimalId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Servings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CropAndAnimalId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCropAndAnimal");
                });

            modelBuilder.Entity("TwigaCRM.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CallTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CallTypeId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("TwigaCRM.Models.QuestionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnswerDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("CallId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("CallId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Response");
                });

            modelBuilder.Entity("TwigaCRM.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Country",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TwigaCRM.Models.RequestedCampaignItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("CampaignItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FOAApprovedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FOAApprovedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFOAApproved")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequestedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignItemId");

                    b.ToTable("RequestedCampaignItem");
                });

            modelBuilder.Entity("TwigaCRM.Models.RequestedExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ApprovedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFOAApproved")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ExpenseCategoryId");

                    b.ToTable("RequestedExpense");
                });

            modelBuilder.Entity("TwigaCRM.Models.RequestedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentMovement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentMovementValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FollowUpAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantObservation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFOAApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProjectedMovement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProjectedMovementValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ProductId");

                    b.ToTable("RequestedProduct");
                });

            modelBuilder.Entity("TwigaCRM.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActualLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActualLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFOAApproved")
                        .HasColumnType("bit");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RouteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("TwigaCRM.Models.SalesMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialYearId")
                        .HasColumnType("int");

                    b.Property<string>("HRBstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("SalesMovement");
                });

            modelBuilder.Entity("TwigaCRM.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("TwigaCRM.Models.StockTake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MainDistributorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RetailAccountManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StockTakeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainDistributorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RetailAccountManagerId");

                    b.ToTable("StockTake");
                });

            modelBuilder.Entity("TwigaCRM.Models.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BusinessPotential")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CropAndAnimalId")
                        .HasColumnType("int");

                    b.Property<decimal>("CropAndAnimalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketShare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SalesMovementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CropAndAnimalId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesMovementId");

                    b.ToTable("Target");
                });

            modelBuilder.Entity("TwigaCRM.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Town");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "All",
                            RegionId = 1,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TwigaCRM.Models.UserBusinessLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BusinessLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BusinessLineId");

                    b.ToTable("UserBusinessLine");
                });

            modelBuilder.Entity("TwigaCRM.Models.UserSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SectorId");

                    b.ToTable("UserSector");
                });

            modelBuilder.Entity("TwigaCRM.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwigaCRM.Models.Answer", b =>
                {
                    b.HasOne("TwigaCRM.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TwigaCRM.Models.AppRole_Permission", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppRole", "AppRole")
                        .WithMany("AppRolePermissions")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Permission", "Permission")
                        .WithMany("AppRolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("TwigaCRM.Models.AppUser", b =>
                {
                    b.HasOne("TwigaCRM.Models.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId");

                    b.HasOne("TwigaCRM.Models.AppRole", "AppRole")
                        .WithMany("Users")
                        .HasForeignKey("UserAppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TwigaCRM.Models.Call", b =>
                {
                    b.HasOne("TwigaCRM.Models.CallType", "CallType")
                        .WithMany("Calls")
                        .HasForeignKey("CallTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Customer", "Customer")
                        .WithMany("Calls")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TwigaCRM.Models.Town", "NonCustomerTown")
                        .WithMany("Calls")
                        .HasForeignKey("NonCustomerTownId");

                    b.HasOne("TwigaCRM.Models.AppUser", "SpokenTo")
                        .WithMany("Calls")
                        .HasForeignKey("SpokenToId");

                    b.Navigation("CallType");

                    b.Navigation("Customer");

                    b.Navigation("NonCustomerTown");

                    b.Navigation("SpokenTo");
                });

            modelBuilder.Entity("TwigaCRM.Models.Campaign", b =>
                {
                    b.HasOne("TwigaCRM.Models.CampaignBudget", "CampaignBudget")
                        .WithMany("Campaigns")
                        .HasForeignKey("CampaignBudgetId");

                    b.HasOne("TwigaCRM.Models.AppUser", "SalesPerson")
                        .WithMany("Campaigns")
                        .HasForeignKey("SalesPersonId");

                    b.Navigation("CampaignBudget");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("TwigaCRM.Models.CampaignBudget", b =>
                {
                    b.HasOne("TwigaCRM.Models.FinancialYear", "FinancialYear")
                        .WithMany("CampaignBudgets")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Town", "Town")
                        .WithMany("CampaignBudgets")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialYear");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TwigaCRM.Models.CropAndAnimal", b =>
                {
                    b.HasOne("TwigaCRM.Models.Sector", "Sector")
                        .WithMany("CropsAndAnimals")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("TwigaCRM.Models.CropAndAnimalPestAndDisease", b =>
                {
                    b.HasOne("TwigaCRM.Models.CropAndAnimal", "CropAndAnimal")
                        .WithMany("CropsAndAnimalsPestsAndDiseases")
                        .HasForeignKey("CropAndAnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.PestAndDisease", "PestAndDisease")
                        .WithMany("CropsAndAnimalsPestsAndDiseases")
                        .HasForeignKey("PestAndDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CropAndAnimal");

                    b.Navigation("PestAndDisease");
                });

            modelBuilder.Entity("TwigaCRM.Models.Customer", b =>
                {
                    b.HasOne("TwigaCRM.Models.Town", "Town")
                        .WithMany("Customers")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Zone", "Zone")
                        .WithMany("Customers")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Town");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("TwigaCRM.Models.CustomerBusinessLine", b =>
                {
                    b.HasOne("TwigaCRM.Models.BusinessLine", "BusinessLine")
                        .WithMany("CustomerBusinessLines")
                        .HasForeignKey("BusinessLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Customer", "Customer")
                        .WithMany("CustomerBusinessLines")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessLine");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TwigaCRM.Models.CustomerSector", b =>
                {
                    b.HasOne("TwigaCRM.Models.Customer", "Customer")
                        .WithMany("CustomerSectors")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Sector", "Sector")
                        .WithMany("CustomerSectors")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("TwigaCRM.Models.DailyMovement", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", null)
                        .WithMany("DailyMovements")
                        .HasForeignKey("AppUserId");

                    b.HasOne("TwigaCRM.Models.DailyMovementReport", "DailyMovementReport")
                        .WithMany("DailyMovements")
                        .HasForeignKey("DailyMovementReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Customer", "MainDistributor")
                        .WithMany("DailyMovements")
                        .HasForeignKey("MainDistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Product", "Product")
                        .WithMany("DailyMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMovementReport");

                    b.Navigation("MainDistributor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TwigaCRM.Models.DailyMovementReport", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("TwigaCRM.Models.Demo", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", "SalesPerson")
                        .WithMany("Demos")
                        .HasForeignKey("SalesPersonId");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("TwigaCRM.Models.DemoDetail", b =>
                {
                    b.HasOne("TwigaCRM.Models.CompetingProduct", "CompetingProduct")
                        .WithMany("DemoProducts")
                        .HasForeignKey("CompetingProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.CropAndAnimal", "CropAndAnimal")
                        .WithMany("DemoProducts")
                        .HasForeignKey("CropAndAnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.CropAndAnimalPestAndDisease", null)
                        .WithMany("DemoProducts")
                        .HasForeignKey("CropAndAnimalPestAndDiseaseId");

                    b.HasOne("TwigaCRM.Models.Demo", "Demo")
                        .WithMany()
                        .HasForeignKey("DemoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.PestAndDisease", "PestAndDisease")
                        .WithMany()
                        .HasForeignKey("PestAndDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Product", "Product")
                        .WithMany("DemoProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetingProduct");

                    b.Navigation("CropAndAnimal");

                    b.Navigation("Demo");

                    b.Navigation("PestAndDisease");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TwigaCRM.Models.DemoProgressReport", b =>
                {
                    b.HasOne("TwigaCRM.Models.DemoDetail", "DemoDetail")
                        .WithMany("DemoProgressReports")
                        .HasForeignKey("DemoDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemoDetail");
                });

            modelBuilder.Entity("TwigaCRM.Models.ExpenseReceipt", b =>
                {
                    b.HasOne("TwigaCRM.Models.RequestedExpense", "RequestedExpense")
                        .WithMany("ExpenseReceipts")
                        .HasForeignKey("RequestedExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedExpense");
                });

            modelBuilder.Entity("TwigaCRM.Models.Plan", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", "SalesPerson")
                        .WithMany("Plans")
                        .HasForeignKey("SalesPersonId");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("TwigaCRM.Models.Product", b =>
                {
                    b.HasOne("TwigaCRM.Models.BusinessLine", "BusinessLine")
                        .WithMany("Products")
                        .HasForeignKey("BusinessLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessLine");
                });

            modelBuilder.Entity("TwigaCRM.Models.ProductCompetingProduct", b =>
                {
                    b.HasOne("TwigaCRM.Models.CompetingProduct", "CompetingProduct")
                        .WithMany("ProductCompetingProducts")
                        .HasForeignKey("CompetingProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Product", "Product")
                        .WithMany("ProductCompetingProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetingProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TwigaCRM.Models.ProductCropAndAnimal", b =>
                {
                    b.HasOne("TwigaCRM.Models.CropAndAnimal", "CropAndAnimal")
                        .WithMany("ProductsCropsAndAnimals")
                        .HasForeignKey("CropAndAnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Product", "Product")
                        .WithMany("ProductsCropsAndAnimals")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CropAndAnimal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TwigaCRM.Models.Question", b =>
                {
                    b.HasOne("TwigaCRM.Models.CallType", "CallType")
                        .WithMany("Questions")
                        .HasForeignKey("CallTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CallType");
                });

            modelBuilder.Entity("TwigaCRM.Models.QuestionResponse", b =>
                {
                    b.HasOne("TwigaCRM.Models.Answer", "Answer")
                        .WithMany("QuestionResponses")
                        .HasForeignKey("AnswerId");

                    b.HasOne("TwigaCRM.Models.Call", "Call")
                        .WithMany("QuestionResponses")
                        .HasForeignKey("CallId");

                    b.HasOne("TwigaCRM.Models.Question", "Question")
                        .WithMany("QuestionResponses")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Answer");

                    b.Navigation("Call");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TwigaCRM.Models.RequestedCampaignItem", b =>
                {
                    b.HasOne("TwigaCRM.Models.Campaign", "Campaign")
                        .WithMany("RequestedCampaignItems")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.CampaignItem", "CampaignItem")
                        .WithMany("RequestedCampaignItems")
                        .HasForeignKey("CampaignItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("CampaignItem");
                });

            modelBuilder.Entity("TwigaCRM.Models.RequestedExpense", b =>
                {
                    b.HasOne("TwigaCRM.Models.Campaign", "Campaign")
                        .WithMany("RequestedExpenses")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("RequestedExpenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("ExpenseCategory");
                });

            modelBuilder.Entity("TwigaCRM.Models.RequestedProduct", b =>
                {
                    b.HasOne("TwigaCRM.Models.Campaign", "Campaign")
                        .WithMany("RequestedProducts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Product", "Product")
                        .WithMany("RequestedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TwigaCRM.Models.Route", b =>
                {
                    b.HasOne("TwigaCRM.Models.Plan", "Plan")
                        .WithMany("Routes")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Zone", "Zone")
                        .WithMany("Routes")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Plan");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("TwigaCRM.Models.SalesMovement", b =>
                {
                    b.HasOne("TwigaCRM.Models.FinancialYear", "FinancialYear")
                        .WithMany("SalesMovements")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.AppUser", "SalesPerson")
                        .WithMany("SalesMovements")
                        .HasForeignKey("SalesPersonId");

                    b.Navigation("FinancialYear");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("TwigaCRM.Models.StockTake", b =>
                {
                    b.HasOne("TwigaCRM.Models.Customer", "MainDistributor")
                        .WithMany("StockTakes")
                        .HasForeignKey("MainDistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Product", "Product")
                        .WithMany("StockTakes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.AppUser", "RetailAccountManager")
                        .WithMany("StockTakes")
                        .HasForeignKey("RetailAccountManagerId");

                    b.Navigation("MainDistributor");

                    b.Navigation("Product");

                    b.Navigation("RetailAccountManager");
                });

            modelBuilder.Entity("TwigaCRM.Models.Target", b =>
                {
                    b.HasOne("TwigaCRM.Models.CropAndAnimal", "CropAndAnimal")
                        .WithMany("Targets")
                        .HasForeignKey("CropAndAnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.Product", "Product")
                        .WithMany("Targets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwigaCRM.Models.SalesMovement", "SalesMovement")
                        .WithMany("Targets")
                        .HasForeignKey("SalesMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CropAndAnimal");

                    b.Navigation("Product");

                    b.Navigation("SalesMovement");
                });

            modelBuilder.Entity("TwigaCRM.Models.Town", b =>
                {
                    b.HasOne("TwigaCRM.Models.Region", "Region")
                        .WithMany("Towns")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TwigaCRM.Models.UserBusinessLine", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", "AppUser")
                        .WithMany("UserBusinessLines")
                        .HasForeignKey("AppUserId");

                    b.HasOne("TwigaCRM.Models.BusinessLine", "BusinessLine")
                        .WithMany("UserBusinessLines")
                        .HasForeignKey("BusinessLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("BusinessLine");
                });

            modelBuilder.Entity("TwigaCRM.Models.UserSector", b =>
                {
                    b.HasOne("TwigaCRM.Models.AppUser", "AppUser")
                        .WithMany("UserSectors")
                        .HasForeignKey("AppUserId");

                    b.HasOne("TwigaCRM.Models.Sector", "Sector")
                        .WithMany("UserSectors")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("TwigaCRM.Models.Zone", b =>
                {
                    b.HasOne("TwigaCRM.Models.Town", "Town")
                        .WithMany("Zones")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TwigaCRM.Models.Answer", b =>
                {
                    b.Navigation("QuestionResponses");
                });

            modelBuilder.Entity("TwigaCRM.Models.AppRole", b =>
                {
                    b.Navigation("AppRolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TwigaCRM.Models.AppUser", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("Campaigns");

                    b.Navigation("DailyMovements");

                    b.Navigation("Demos");

                    b.Navigation("Plans");

                    b.Navigation("SalesMovements");

                    b.Navigation("StockTakes");

                    b.Navigation("UserBusinessLines");

                    b.Navigation("UserSectors");
                });

            modelBuilder.Entity("TwigaCRM.Models.BusinessLine", b =>
                {
                    b.Navigation("CustomerBusinessLines");

                    b.Navigation("Products");

                    b.Navigation("UserBusinessLines");
                });

            modelBuilder.Entity("TwigaCRM.Models.Call", b =>
                {
                    b.Navigation("QuestionResponses");
                });

            modelBuilder.Entity("TwigaCRM.Models.CallType", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TwigaCRM.Models.Campaign", b =>
                {
                    b.Navigation("RequestedCampaignItems");

                    b.Navigation("RequestedExpenses");

                    b.Navigation("RequestedProducts");
                });

            modelBuilder.Entity("TwigaCRM.Models.CampaignBudget", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("TwigaCRM.Models.CampaignItem", b =>
                {
                    b.Navigation("RequestedCampaignItems");
                });

            modelBuilder.Entity("TwigaCRM.Models.CompetingProduct", b =>
                {
                    b.Navigation("DemoProducts");

                    b.Navigation("ProductCompetingProducts");
                });

            modelBuilder.Entity("TwigaCRM.Models.CropAndAnimal", b =>
                {
                    b.Navigation("CropsAndAnimalsPestsAndDiseases");

                    b.Navigation("DemoProducts");

                    b.Navigation("ProductsCropsAndAnimals");

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("TwigaCRM.Models.CropAndAnimalPestAndDisease", b =>
                {
                    b.Navigation("DemoProducts");
                });

            modelBuilder.Entity("TwigaCRM.Models.Customer", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("CustomerBusinessLines");

                    b.Navigation("CustomerSectors");

                    b.Navigation("DailyMovements");

                    b.Navigation("StockTakes");
                });

            modelBuilder.Entity("TwigaCRM.Models.DailyMovementReport", b =>
                {
                    b.Navigation("DailyMovements");
                });

            modelBuilder.Entity("TwigaCRM.Models.DemoDetail", b =>
                {
                    b.Navigation("DemoProgressReports");
                });

            modelBuilder.Entity("TwigaCRM.Models.ExpenseCategory", b =>
                {
                    b.Navigation("RequestedExpenses");
                });

            modelBuilder.Entity("TwigaCRM.Models.FinancialYear", b =>
                {
                    b.Navigation("CampaignBudgets");

                    b.Navigation("SalesMovements");
                });

            modelBuilder.Entity("TwigaCRM.Models.Permission", b =>
                {
                    b.Navigation("AppRolePermissions");
                });

            modelBuilder.Entity("TwigaCRM.Models.PestAndDisease", b =>
                {
                    b.Navigation("CropsAndAnimalsPestsAndDiseases");
                });

            modelBuilder.Entity("TwigaCRM.Models.Plan", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("TwigaCRM.Models.Product", b =>
                {
                    b.Navigation("DailyMovements");

                    b.Navigation("DemoProducts");

                    b.Navigation("ProductCompetingProducts");

                    b.Navigation("ProductsCropsAndAnimals");

                    b.Navigation("RequestedProducts");

                    b.Navigation("StockTakes");

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("TwigaCRM.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionResponses");
                });

            modelBuilder.Entity("TwigaCRM.Models.Region", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("TwigaCRM.Models.RequestedExpense", b =>
                {
                    b.Navigation("ExpenseReceipts");
                });

            modelBuilder.Entity("TwigaCRM.Models.SalesMovement", b =>
                {
                    b.Navigation("Targets");
                });

            modelBuilder.Entity("TwigaCRM.Models.Sector", b =>
                {
                    b.Navigation("CropsAndAnimals");

                    b.Navigation("CustomerSectors");

                    b.Navigation("UserSectors");
                });

            modelBuilder.Entity("TwigaCRM.Models.Town", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("CampaignBudgets");

                    b.Navigation("Customers");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("TwigaCRM.Models.Zone", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
